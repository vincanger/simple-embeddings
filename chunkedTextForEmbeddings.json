[
  [
    {
      "title": "Positioning_for_technical_products.pdf-0",
      "content": "Positioning – what the hell is it? And why is everyone talking about it? The goal of this template is to help you figure out how to effectively position your product for developers or data teams, and as a consequence be able to write better website copy, pitch candidates better, give more effective demos, improve your documentation, etc. etc. # What positioning is and why it’s important The best definition of positioning I’ve found is this: “Positioning defines how your product is a leader at delivering something that a well-defined set of customers cares a lot about.” –April Dunford, positioning...expert or something This is not just a marketing exercise, because as a founder your job is literally to talk about the product all the time. Think: giving demos, sales calls, pitching candidates, creating your website, writing blog posts – pretty much anything external facing is going to require you to articulate your product’s value and place in the market. How confident are you that you’re doing it well? Couched in the above meaning-packed sentence is a lot of stuff you have probably been thinking about: ●Who is the audience for my product? ●What features do they care about? ●How do I differentiate from alternatives? ●.. Setting aside time to run through these questions, debate with your team, get feedback from experts, and the like will make everything you do in the early stagesa lot easier.",
      "content_length": 1412,
      "content_tokens": 297
    },
    {
      "title": "Positioning_for_technical_products.pdf-1",
      "content": "So how exactly do you go about doing that? Positioning is usually a game ofchoice– you’ll havea few different ways you can tell your story, but eventually you are going to need to commit to one 1  For an example, consider a 1 Early on, it’s cool to experiment with different positioning strategies. But eventually, you’ll want the whole company on the same page with who the audience is and what you provide to them.  product thatgives you visibility into how your Machine Learning models are performing. What’s the right way to position and message that product? ●ML monitoring for engineers ○For ML engineers who want confidence that your models are performing well in production, our product provides flexible, extensible, and easy-to-use infrastructure for model observability. ●Optimizely for ML ○For ML leaders who want to build great products powered by ML, our product provides tools to debug, improve, and personalize production model performance. ●Production data platform for ML engineers ○For busy ML teams tired of spending time wrangling data through fragmented tools, our product provides a data platform for your production models that lets you focus on building models, not managing your data. These all sound pretty good. And they all define slightly different audiences, angles, contexts, and value propositions. So let’s dive into how to define positioning, and ultimately decide on a way of doing it that works.",
      "content_length": 1432,
      "content_tokens": 298
    },
    {
      "title": "Positioning_for_technical_products.pdf-2",
      "content": "### When do I need to start thinking about positioning? Pretty much from day 1. How you position and set context will determine which users think you’re relevant to them, so even if you don’t have any yet, you can’t ignore this question. In fact, running through the positioning template below can be a useful exercise for clarifying how you’re thinking about your idea, even in the idea stage. Positioning is also an evolving thing. How you position yourself on day 1 will probably be different than year 2, as you gather more feedback from the market on what’s working and what isn’t. ### What is the output of positioning? The output of positioning work is not just a positioning statement or a headline on your website: rather it is a more holistic understanding of your context in the market, and how to talk about what you’re doing in a compelling way to your audience. This “understanding” can take form in a document going in depth on your positioning, a set of taglines and answers to questions, or even a recurring presentation to the company explaining how to pitch the company. It is a lot deeper than a good website headline.  In the realm of the sales deck,Andy Raskin’s postabout positioning in the context ofchangeis useful and worth reading.",
      "content_length": 1258,
      "content_tokens": 279
    },
    {
      "title": "Positioning_for_technical_products.pdf-3",
      "content": "# Defining positioning for technical tools Here is a (hopefully) useful framework for figuring out your positioning, based onApril Dunford’s popular one, with a technical bent. It focuseson figuring out yourproduct context through getting deep on alternatives, what features are important, what value they enable, and who that value is important to. Each of these feeds into one another, so it’s important to do them in order. We’ll useHexas a walkthrough example. ### Alternatives  You probably built your product because you were fed up with whatever life looked like without it. But what exactly did that life look like? Recall the trauma!! If you didn’t exist, what would customers use? ●Building things from scratch, plain JavaScript, etc. ●Popular open source frameworks ●Big, clunky ancient products ●Underpowered startup products E.g. before Hex, data teams built and shared work through an awkward lacework of products. You have Jupyter notebooks for running Python, but they didn’t quite play nice with SQL; sharing your work required setting up a server or sharing a literal notebook file. Frameworks like Shiny (if you’re using R) would help set up basic frontends, but data teams don’t know Flask or how to build UIs.",
      "content_length": 1230,
      "content_tokens": 276
    },
    {
      "title": "Positioning_for_technical_products.pdf-4",
      "content": "With the advent of products like Mode, there are now more places for data teams to work together; but these tools don’t focus on sharing knowledge, which is what effective data teams are all about. It isreallyworth it toget into specificshere.With technical audiences, having a firm grasp on your alternatives can really make them feel like you understand them. And even ifyouhave that grasp, does everyone at your company have it? Do your salespeople have it? Can they articulate why it’s easier to build internal tools in Retool than it is in React? Can they mention Redux in passing so that the person on the other side of the Zoom feels understood? Finally, a lot of founders start thinking about positioning because a newstartupcompetitoris making them feel insecure about their unique value proposition. This could be a startup that launched after you did or around the same time. A startup competitor is distinct from an open source alternative, a home grown solution, or a big incumbent competitor. Your startup competitors are part of the universe of alternatives! So you need to position yourself in a way that’s differentiated from competitors. Unfortunately, you won’t always know what your competitors’ products are like or how they position themselves, and it will be constantly changing.  So unless you are getting explicit questions about it from customers, in the early stages I would put this on the backburner 2 .Positioning vs.",
      "content_length": 1447,
      "content_tokens": 295
    },
    {
      "title": "Positioning_for_technical_products.pdf-5",
      "content": "competitive alternatives is always critical; positioning vs. startup competitors is not always critical. ### Featured features 2 This is obviously an oversimplification. Another post for another time.  What are the specific things that you can do in your product that make it much better than those alternatives you just laid out? Without HexWith Hex Connecting your data warehouse via an ORM1-2 clicks connects to any major data warehouse Awkward SQL in notebook cellsAutocomplete, one click formatting, and an inline schema browser Python in a notebook, SQL in an IDEWrite Python and SQL in the same environment, and even pass data between them Saving different notebooks for version control Git synced version control and release history in a slick UI ..... For this section, don’t worry about the value (this makes me faster, etc.), just focus on the specific features and design decisions that make using your product better than the alternatives. Which features you choose to...feature have an important impact on the context you’re setting for your audience. Returning to our example ML monitoring solution above, which features we focus on tell and entirely different story: ●Fine grained alerts and thresholds → communicates that this is a monitoring / observability solution ●Powerful charts and funnels → communicates that this is an analytics solution / data platform Your product probably has a lot of cool things you can do with it, but you need to pick the important ones that best position you against alternatives.",
      "content_length": 1531,
      "content_tokens": 295
    },
    {
      "title": "Positioning_for_technical_products.pdf-6",
      "content": "There will always be opportunities to market the other ones down the road. ### What have you done for me lately? Value  If you had to describe your product’s value proposition in 1-2 key pillars, what would they be? A value proposition explains how using your product will improve your users’ lives in a particular way. In technical tools, there’s a pretty limited world of value props: ●Speed– this saves me time ●Simplicity– this makes my life easier. This removesmental clutter ●Power / flexibility– this gives me a power up, thislets me do things I otherwise couldn’t do ●Impact– this helps me accomplish something I’m strugglingto accomplish, this makes me more impactful at my job You can get more specific too, but they’ll always roll up into making your user faster, better, stronger: ● Integrations– this works with my existing tools ●Security– this covers all bases and will improveour perimeter For each one of these pillars, you need to think about which specific features and design decisions make your product actually fulfill this promise. For developers and data teams, just telling themthat your product will save them timeisn’t enough; you need to explain and show them how. So take your outputs from the last section and map them to the value you’re bringing.",
      "content_length": 1278,
      "content_tokens": 282
    },
    {
      "title": "Positioning_for_technical_products.pdf-7",
      "content": "Over the past few years, a common value proposition in technical tools has become “stop spending time doing _____ so you can focus on what matters” where “what matters” is something like core feature work. This value proposition is really at its core somewhere between saving time and simplicity, i.e. don’t waste your time on something you could just automate. E.g. Hex makes it incrediblyfastandsimpleto createpowerful analysis right in your browser. You can connect your data warehouse (we support some wacky ones) in just a few clicks and get straight to writing SQL. Our SQL editor has thoughtful features to make your queries easier to write: autocomplete, one click formatting, and an inline schema browser so you know the column is firstName and not first_name. ### Like + subscribe: your audience The final and perhaps most important part of technical positioning isthe audience. If you ask most technical founders who their audience is, they’ll say something like:  “We sell to developers” Sorry, but that is not an audience. It needs to be more specific! Every company in infrastructure is selling things to “developers.” Here are two ways to be more specific: 1.Demographic specificity Getting more specific demographically could mean cutting your audience by a combination of: ●Role– full stack, frontend, SRE, DBA, etc.",
      "content_length": 1333,
      "content_tokens": 293
    },
    {
      "title": "Positioning_for_technical_products.pdf-8",
      "content": "●Company size– startups, enterprises, etc. ●Industry– healthcare, fintech, etc. ●Focus– ambitious, security conscious, cautious You will likely need to choose multiple of these for the audience to be specific enough. And even then, it’s hard to know this information in advance of going out to market and figuring out who cares about your product. That’s why I like early audience definition byproblem-context instead. 2.Problem-context specificity With problem-context specificity, you define your audience by a specific problem they’re experiencing at the current moment. E.g. Hex is built for data analysts and scientists who are struggling to build and share impactful analysis. Or: E.g. Retool is built for developers tasked with building an internal tool for a customer support, marketing, or operations team. I find this framing useful because itreallysetscontext with your audience, and it helps dictate the kinds of content you’d want to create down the road. It turns out that it can be easier to target “developers facing a specific problem” than “developers of a specific kind” sometimes. Combining the two can work well too.  E.g. Hex is built for data teams at small to mid sized companies with cloud based data warehouses and dbt projects who are struggling to build and share impactful analysis.",
      "content_length": 1311,
      "content_tokens": 287
    },
    {
      "title": "Positioning_for_technical_products.pdf-9",
      "content": "### How do I get these answers? Viewing positioning as a set of experiments Ah yes, the hard part. For some of these positioning questions, you’ll have a good idea of the answer, usually taken from some combination of: ●Your experience as a former target users of this product ●Talking to potential customers and seeing what sticks ●If you have existing customers / partners, their use cases For others though, you won’t be quite sure: which is why early on, you shouldview positioning as a set of experiments. It’s impossible to know forsure what messaging and positioning will resonate most with potential customers, hires, etc. – so you can use every opportunity to crisp up that messaging and see where it falls flat. If you have a few ideas of what positioning might work, but you aren’t sure, try experimenting with using different ones when pitching a new candidate to join or giving a demo to a potential new customer. You probablyalready do this, to a degree.But being intentional about it, and maybe even tracking things methodically, can go a long way. Your customers will also tell you how to position if you listen. “The thing a lot of founders miss is listening vs. talking. Your users know what their pain points are, and they will tell you all about them if you come at it the right way.",
      "content_length": 1303,
      "content_tokens": 281
    },
    {
      "title": "Positioning_for_technical_products.pdf-10",
      "content": "Many founders (me included), however, will try to go in their cave and craft the perfect positioning statement in a vacuum. For our messaging stuff now, we insist on always bringing real customer and user quotes into it. If we haven't heard it from a user, we can't use it in our marketing.” – Barry McCardel, Hex CEO You don’t always want to take what your users say at perfect face value, though. Often customers will ask for a specific solution to their problem which might not actually be the best way to solve it (better horses vs. cars, etc.) With a focus on problem definition, sometimes you need to see past what they’re saying to hear the “real” pain. Each customer is going to give you new information, make sure to look at this feedback in aggregate and not make huge shifts based on what one prospect tells you.  ## Positioning template Your AnswerHexample Competitive Alternatives If you didn’t exist, what would customers use? Without Hex, doing analysis requires an awkward combination of Python in home grown notebooks and SQL in IDEs. Sharing your work ends up as static screenshots of Excel charts in a presentation. Key Unique Attributes What features / capabilities do you have that alternatives don’t? Hex lets you write SQL and Python in a beautiful cloud-based notebook interface.",
      "content_length": 1303,
      "content_tokens": 279
    },
    {
      "title": "Positioning_for_technical_products.pdf-11",
      "content": "You can connect your data in only a few clicks, and easily build interactive data apps on top of your work with a drag and drop app builder. Value What do the attributes enable for customers? Hex brings your analysis and your sharing into the same platform. You’ll have a significantly easier time analyzing data, and actually sharing it with your organization so you can have an impact. It turns your work from academic to actual. Customers That Care Who cares a lot about that value? Data teams at small to mid sized startups, using a cloud data warehouse, working primarily in SQL and Python, focused on making their work impactful throughout the organization.",
      "content_length": 663,
      "content_tokens": 130
    }
  ],
  [
    {
      "title": "fullstack-standards.docx-0",
      "content": "ITM - Application Development Standards & Scaling Framework    Introduction    Software is built with the objective of making tedious tasks easier, getting things done faster, more efficiently, and getting more done with less human inputs than otherwise would be the case without technology.    Over the years, UNDP including many UNDP Country Offices, Regional/Central Bureaus (RBx/CBx) and other Business Units have developed and maintained software for many of the same reasons stated above.    A lot of this innovation and applications development activity has successfully addressed corporate needs as well as local business requirements or unique circumstances not necessarily covered and/prioritized by UNDP corporate technology solutions. Nevertheless, some of the applications are to a certain extent overlapping with each other as well as with corporate applications, thus creating duplication and resource inefficiencies.    In addition, applications development throughout the organization had a tendency to take place in a narrow fashion, only focusing of the specific issue the innovation is supposed to resolve at a local level, without the vision that the innovation can have wider benefits across UNDP. Therefore, when promising local applications are identified, it is often found that scaling for the benefit of all of UNDP would incur considerable time and expense to do so given the absence of technical standards and processes.",
      "content_length": 1449,
      "content_tokens": 268
    },
    {
      "title": "fullstack-standards.docx-1",
      "content": "This framework on applications standards and scale-up has therefore been developed to address above issues and to clarify UNDP´s practice as well as support arrangements for applications development.  Purpose    This framework is intended to outline the technical standards and processes that Country Offices and all UNDP Business Units should follow for application development and will furthermore provide a governance framework for application development in UNDP in accordance with industry standards while balancing the need for a strong corporate direction with possibilities for innovation across business units.    This will allow Business Units to access technical, advisory, and contractual corporate support resources throughout the application’s lifecycle as described in Chapter VI. Failure to follow the guidance in this framework will impede Business Units undertaking development to access said resources.    Business Units following this set standard will allow ITM to scale up local innovations in an efficient and timely manner without having to incur significant time and expenses to do so for the benefit of all of UNDP to harvest and benefit from the efficiencies gained.  An added benefit is the fostering of a developer community of practice focused on collaborative knowledge sharing and retention within a UNDP wide technical community under an ITM umbrella.  Definitions    Full stack development refers to the development of both front end (client side) and back end (server side) portions of an application.    Low code is a software development method that allows colleagues to create fully featured applications with minimal coding.",
      "content_length": 1663,
      "content_tokens": 292
    },
    {
      "title": "fullstack-standards.docx-2",
      "content": "With low-code, non-technical users utilize visual point-and-click tools to build, modify and deploy custom software. At the same time, programmers and tech-savvy professionals can extend applications by injecting code. Microsoft PowerApps is an example of such Low Code development platform. Other low code platforms, namely Oracle VBCS, Salesforce APEX, and ServiceNow App Engine, which will be opened up to UNDP Business Units after Quantum implementation.    Azure DevOps is composed of a set of services for teams to share code, track work, and deliver software in a managed and scalable manner. It consists of the following:    Azure Artifacts allow teams to share packages and integrate package sharing into pipelines.   Azure Boards consists of a suite of Agile tools to support planning and tracking work, code defects, and issues using Kanban and Scrum methods.  Azure DevOps collaboration tools includes customizable team dashboards with configurable widgets to share information, progress, and trends, built-in wikis for sharing information, and configurable notifications.  Azure Pipelines provide build-and-release services to support continuous integration and application delivery.  Azure Repos for code source control.  Azure Test Plans consist of several tools to test applications including manual/exploratory testing and continuous testing.    Functional Requirements describes what the system or application shall do, i.e., the UNDP business requirement it will resolve.",
      "content_length": 1490,
      "content_tokens": 297
    },
    {
      "title": "fullstack-standards.docx-3",
      "content": "Wireframing is one of the initial phases in the creation of a digital product and consists of the design of the structure that each of the screens or interfaces of that product will have.    GIT Repository. Git is a software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development, thus the GIT Repository refers to the central storage facility for source codes within this solution.    Information Technology Infrastructure are the components required to operate and manage enterprise IT environments, which includes hardware, software, networking components, an operating system (OS), and data storage, all of which are used to deliver IT services and solutions.    Data classification is the process of analyzing structured or unstructured data and organizing it into categories based on file type, contents, and other metadata.    User authentication is a process that allows a device to verify the identity of someone who connects to a network resource.    Docker Containers. Docker is an open-source containerization platform. It enables developers to package applications into containers—standardized executable components combining application source code with the operating system (OS) libraries and dependencies required to run that code in any environment.    Kubernetes clusters. A set of nodes that run containerized applications. Containerizing applications packages an app with its dependences and some necessary services. They are more lightweight and flexible than virtual machines.",
      "content_length": 1605,
      "content_tokens": 296
    },
    {
      "title": "fullstack-standards.docx-4",
      "content": "In this way, Kubernetes clusters allow for applications to be more easily developed, moved, and managed. Kubernetes clusters allow containers to run across multiple machines and environments: virtual, physical, cloud-based, and on-premises. Kubernetes containers are not restricted to a specific operating system, unlike virtual machines. Instead, they can share operating systems and run anywhere.    ITM COE refers to the ITM Digital Corporate Platforms Application Center of Excellence (CoE), which is the ITM Center tasked with provision of advice to Country Offices and Business Units on applications development.    The Application Development Lifecycle (ADL) typically encompasses a six-step process starting with analysis, then wireframing before moving into design and development followed by deployment and maintenance, as illustrated below:      Scope    The scope of the framework is limited to the development of Full Stack and Low-Code applications to be consumed by UNDP workforce for internal use. Not applicable for website development such as static websites, WordPress websites, etc.    Applications or web properties developed for Programme activities and purposes which will eventually be either terminated or handed over to the partner at the conclusion of a project, are out of scope. For such cases, UNDP should follow technical standards as agreed upon in the Project Document.",
      "content_length": 1402,
      "content_tokens": 278
    },
    {
      "title": "fullstack-standards.docx-5",
      "content": "This POPP does not cover specifics regarding the purchase of Software as a Service (SaaS) subscriptions by a local unit. If a Business Unit wishes to make a SaaS purchase, it should direct a request via UNALL to the Digital Corporate Systems team (ITM COE) for advisory guidance and authorization along with a request to the Chief Information Security Office to perform a security compliance assessment prior to making any commitments or purchase.  Requirements    This section covers the requirements for both full stack as well as low code development and details a set of requirements to be met at all stages of the Application Development Lifecycle (ADL)    Under full-stack development, all steps of the ADL lifecycle must be managed using Azure DevOps.    Application Development should be documented, including governance, functional requirements and a short description of the information technology infrastructure, data classifications, user authentication, periodical review, license management, and related security requirements.    Analysis     Prior to local application development, the application inventory in the ICT Registry should be consulted to verify whether duplication exists with similar solutions in other Country Offices/Business Units, thereby avoiding duplication and waste of resources.",
      "content_length": 1316,
      "content_tokens": 248
    },
    {
      "title": "fullstack-standards.docx-6",
      "content": "Every local application development should furthermore be consulted with the Regional ICT Coordinator in advance, and he/she will make sure that there is no duplication of work with corporate applications or applications already developed locally in other Country Offices/Business Units and in production. He/she will check the following:  If the app can be scaled up to a regional or global solution;   if it can be developed using already present corporate tools;   if it follows basic security principles;   can it be developed as a PowerApp instead of full development, etc.    The functional requirements should include a method or a business case review to establish the business value of an application development (e.g., considering number of end users versus total cost or contribution of the application to achievement of development project objectives) This will however not prevent Business Units to proceed with the start-up of the productivity application as described under 62.    For full-stack development, the specifics in a project should be set adopting an agile development approach with Minimum Viable Product (MVP) success criteria clearly defined.    Wireframing and Design Analysis    Nowadays, many solutions that bore required a full-scale application development, can now be developed using PowerApps and SharePoint. Hence, due consideration should be given to PowerApps and SharePoint as the platform for software development before anything else.    For wireframing, the recommended tool is Figma.",
      "content_length": 1527,
      "content_tokens": 297
    },
    {
      "title": "fullstack-standards.docx-7",
      "content": "Role based access control must be embedded into the design and development of the application for purposes of enforcing data and system restrictions along with privileged access to users. This will allow for the possibility to use the Corporate IDAM application if application is eventually scaled.    When designing an app, it should generally be designed with expectation of scaling up and being used by other Country Office and Business Units.     Accessibility for people with disabilities is an important consideration which must be included when designing applications.    High level concepts to consider when wireframing and designing an application, such as which deployment mechanism to choose:  Application must employ the principle of modularity and reusability via an API first design and architecture.   Description of the requirements for data processing by the applications and data storage within the applications;   Description of the reporting requirements for the newly developed applications (e.g. what are the reporting tools, the benefits, scalability, and infrastructure) All reporting should follow the UNDP corporate data strategy and guidelines.    Development & Deployment    If the Country Office/Business Unit is hiring a developer, they should follow the guidelines on hiring Software developer described under “External contractor/firm guidelines”    Applications that integrate with UNDP systems (authentication, data extraction from or data entry to corporate systems) must pass security evaluation, which is administered by ITM/CISO.",
      "content_length": 1567,
      "content_tokens": 292
    },
    {
      "title": "fullstack-standards.docx-8",
      "content": "Locally developed apps must be hosted on UNDP’s corporate hosting platforms such as Azure. Hosting apps locally, or at developer or at external hosting is not allowed.    Source code of all locally developed apps should be stored in UNDP’s GIT repository.    If Country Office/Business Unit plans to do cost recovery for the application from other offices, UNAll service catalogue is available for this purpose and ITM can assist with recovering the costs leveraging the UNAll eStore.    All locally developed apps should be recorded in ICT Registry, under the application inventory, with a short description about the application including platform and what is does.    For Full-stack applications development, applications should be encapsulated as a container that can be operated independently in either stateful or stateless manners using Docker Containers and will be deployed and orchestrated into Kubernetes clusters.     The following languages will be supported for front end / back-end full-stack development and containerization. Front End: HTML5, CSS3, Java Script, J Query. Back End: PHP, .NET, Python.    The following databases will be supported as part of the application container: MS SQL, MY SQL, Blob Storage.",
      "content_length": 1229,
      "content_tokens": 263
    },
    {
      "title": "fullstack-standards.docx-9",
      "content": "Application development must use Git version control system where the source code is required to be open and accessible to all internal UNDP and hosted on corporate Azure DevOps source code repositories.    Use of corporate identity provider as the source user identity and authentication (Azure AD or B2C) Applications should not develop localized identity stores.    Support      Currently, UNDP ITM supports only the use of Microsoft’s Power Platform at the feature level included with our Microsoft 365 subscription. Therefore, Country Offices embarking on full-stack development must ensure availability of the required capacity, expertise and management oversight throughout the life-time of the application.    Capacity must be planned for at the outset for support, maintenance, and enhancement activities. This structure should use UNALL to log support related activities.    External Contractor/Firm Guidelines    In cases where the Country Office or Business Unit contracts with a vendor or Individual Contractors to develop software, UNDP´s Procurement Rules will be followed, with particular attention being paid to:     The scope of any agreement, including a developer agreement, explains the project and what is required of the parties involved. This section should be detailed because vague explanations give room for misunderstandings of the agreement.",
      "content_length": 1370,
      "content_tokens": 266
    },
    {
      "title": "fullstack-standards.docx-10",
      "content": "This section should address the software development process used, whether the development will a singular stage or phased stages, when the final deliverable shall be made, the length of the developer agreement, and whether the agreement covers further development. Sometimes, further development is covered in a future agreement.    The scope should also include a clear timeline that provides specific timing for certain milestones (or deliverables) A list of consequences related to missing the deadline should be included. Additionally, if there are ancillary items (including cloud services) required for the development, the responsibilities of each party should be explained. Clarity is key when drafting or even reviewing the scope of services. The clearer this portion is written, the easier it can be to navigate the relationship and ensure that deadlines are met.    Technical requirements should, much like the scope, be written clear and easy to understand. This helps UNDP lessen the risk associated with the project. Some of the information in this clause would include whether the developers will have their code reviewed against a certain standard, when payment will occur, detailed software specifications, specific language about how risk will be mitigated, and the costs and risks of the project. When the technical requirements or specifications are not clear, software development could end up costing UNDP more than originally envisaged with software not meeting expectations.    The technical requirements should include the cybersecurity requirements for the system/application.",
      "content_length": 1603,
      "content_tokens": 285
    },
    {
      "title": "fullstack-standards.docx-11",
      "content": "System Performance and acceptance testing measures clause explains the acceptance testing measure for the software that will occur at certain key stages of the development process. This clause should line up with the payment schedule as well as explain that payment occurs when the key stages of the development process are fulfilled and accepted. Additionally, it is helpful to include a timeframe for the performance and acceptance testing measures that explains how long it will take UNDP to get through this process at those stages.    Non-performance clause explains what happens if the developer does not meet the standards listed in the scope, fulfill deadlines, or otherwise present code (or pieces of code) that do not meet the requirements of the project as explained. Non-performance addresses terms that explain how UNDP will move the project from the current developer to another developer. It may also address the resources, processes, and the responsibility involved in moving the project to another developer as well as who will pay the associated costs. Ownership of the intellectual property and other crucial items are also addressed.    Ownership and Intellectual Property. Software is considered intellectual property. A developer agreement should include clear language about the intellectual property rights involved.",
      "content_length": 1340,
      "content_tokens": 233
    },
    {
      "title": "fullstack-standards.docx-12",
      "content": "This includes, and is not limited to, who owns the intellectual property (including who will own any copyrighted material), the steps that will be taken to ensure that UNDP is assigned (or owns) the relevant intellectual property related to the software, if escrow is involved in holding copies of the intellectual property (such as code or data) until a triggering event occurs, and any warranties or indemnities.     Licensing. If UNDP will own the software after it is created, UNDP may need to include a licensing clause that addresses whether the developer is allowed to have a license to use the software after UNDP has obtained all applicable intellectual property rights as well as whether they are allowed to continue to develop the software. A list of events that would result in the license being terminated should also be included.    Both fees and payments should be explicitly addressed in accordance with UNDP´s procurement rules. For example, will UNDP pay reasonable upfront fees? Whether there a specific UNDP will calculate the costs (including fees) for future work on the project, and whether the developer is allowed to stop working if a fee dispute or payment delay occurs, should be clearly addressed in the agreement.",
      "content_length": 1242,
      "content_tokens": 244
    },
    {
      "title": "fullstack-standards.docx-13",
      "content": "Corporate Support Resources    Base Offering    For purposes of quick starting the ADL cycle and to ensure Application sustainability in the long run, ITM will provide on a “no cost recovery” basis to the local unit access and usage to the following set of base resources:  Azure DevOps as outlined in the Definition section.  Corporate Containerization hosted solution to support all categories of scaling.  Hosted pipeline to support continuous integration and deployment of the application.  UNDP mobile app store publishing identity for Apple and Google store.    Access to advisory and support services (scope defined by the table in paragraph number 63) provided by the ITM Digital Corporate Platforms Application Center of Excellence (CoE), hereinafter referred to as the ITM COE.     The ITM COE team is composed of skilled technology professionals whose mission is to provide best practices around application development. An important goal of a center of excellence is to eliminate inefficiencies and help mature UNDP’s technical capacities. CoE members are responsible for disseminating knowledge about the center's capabilities and providing staff with support for implementing recommended best practices.    The level of support offered on a “no cost recovery” basis will be capped based on a “reasonableness” test.",
      "content_length": 1328,
      "content_tokens": 272
    },
    {
      "title": "fullstack-standards.docx-14",
      "content": "A la cart offering    A large range of SAS services via corporate LTAs are available to be used by CO, RBx, CBx teams to support business function and innovation needs.     UNDP has agreements with Microsoft and Amazon AWS to leverage cloud subscriptions to the following services: Blockchain, Machine Learning / Artificial Intelligence, Internet of Things, Robotic Process Automation, Big Data, and many more.    The Country Office /Business Unit should place the request to the UNAll estore following a dialogue with the Digital Corporate Platforms team within ITM for advisory and procurement assistance.    The acquisition and yearly subscription costs for the “a la carte” offerings will be borne by the Country Office /Business Unit.      Application Categorization    Application scaling is embedded into the platform and supported during the entire life cycle of the application. Applications are categorized based on a specific set of attributes and each category will be entitled to a specific set of allocated technical capacity.    Applications will be categorized as follows:  Productivity:   Often addressing local needs and used by a single country office or unit.  Does not require a high level of governance and oversight.  Built and supported by an individual citizen developer.  Important:  Adopted and used by many country offices or units.  Of medium complexity and scoped to support an entire business unit (country, region, bureau)",
      "content_length": 1454,
      "content_tokens": 297
    },
    {
      "title": "fullstack-standards.docx-15",
      "content": "Authorized to integrate with other corporate platforms.  Corporate Critical:  Adopted by large number of offices and endorsed by HQ ITM governance group as a corporate application.   Mission critical highly complex application designed for organization wide usage.    Technical Capacity Allocation    The following table depicts the technical capacity allocated and some key processes elements to be followed for each category of applications.        Containerized Resources  Design & Development  Peer Review  Change Control  Support  Productivity  Limited CPU, RAM, Storage allocations.  Lead by local developers & business owners  None  None or local rules  Provided locally  Important  Expanded CPU, RAM, Storage allocations.  Lead by local developers & business owners  Design & Development reviewed by ITM CoE  Follows corporate change control standards  Provided locally  Corporate / Critical  Corporate level of CPU, RAM, Storage allocations.  Co-development and design between CoE team & local developers & business owners  Embedded in Design and Development  Follows corporate change control standards  Provided by ITM Global Service Desk    Application Owner’s Responsibility    Commitment to the completion, ongoing maintenance, and sunsetting of the application including but not limited to:  Allocated development resources (people, time, budget)  Designated business owner(s)/partner(s)  Engage and ensure stakeholder participation.",
      "content_length": 1447,
      "content_tokens": 291
    },
    {
      "title": "fullstack-standards.docx-16",
      "content": "Participate and achieve required skills/certifications to meet the application requirements.  Allocated support resources to ensure the day-to-day wellbeing and the evolution of the application.  Suspend/cancel/retire inactive projects or applications.    Making effort to collaborate, extend, and reuse existing project(s) which share functionality commonalities.    Provide clear and extensive documentation of the application including overall design documentation, source code commenting, API specifications, and application usage guide.",
      "content_length": 541,
      "content_tokens": 101
    }
  ]
]